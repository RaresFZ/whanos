<?xml version='1.1' encoding='UTF-8'?>
<project>
  <description>Creates a new Whanos CI/CD job for a given Git repository</description>
  <keepDependencies>false</keepDependencies>
  <properties>
    <hudson.model.ParametersDefinitionProperty>
      <parameterDefinitions>
        <hudson.model.StringParameterDefinition>
          <name>REPOSITORY_URL</name>
          <description>Git repository URL (e.g., https://github.com/user/repo.git)</description>
          <defaultValue></defaultValue>
          <trim>true</trim>
        </hudson.model.StringParameterDefinition>
        <hudson.model.StringParameterDefinition>
          <name>REPOSITORY_NAME</name>
          <description>Friendly name for the repository (will be used as job name)</description>
          <defaultValue></defaultValue>
          <trim>true</trim>
        </hudson.model.StringParameterDefinition>
        <hudson.model.StringParameterDefinition>
          <name>BRANCH</name>
          <description>Git branch to monitor (default: main)</description>
          <defaultValue>main</defaultValue>
          <trim>true</trim>
        </hudson.model.StringParameterDefinition>
        <hudson.model.StringParameterDefinition>
          <name>CREDENTIALS_ID</name>
          <description>Jenkins credentials ID for private repositories (leave empty for public repos)</description>
          <defaultValue></defaultValue>
          <trim>true</trim>
        </hudson.model.StringParameterDefinition>
      </parameterDefinitions>
    </hudson.model.ParametersDefinitionProperty>
  </properties>
  <scm class="hudson.scm.NullSCM"/>
  <canRoam>true</canRoam>
  <disabled>false</disabled>
  <blockBuildWhenDownstreamBuilding>false</blockBuildWhenDownstreamBuilding>
  <blockBuildWhenUpstreamBuilding>false</blockBuildWhenUpstreamBuilding>
  <triggers/>
  <concurrentBuild>false</concurrentBuild>
  <builders>
    <javaposse.jobdsl.plugin.ExecuteDslScripts plugin="job-dsl">
      <targets>create_project_job.groovy</targets>
      <usingScriptText>true</usingScriptText>
      <scriptText><![CDATA[
def repoUrl = binding.variables['REPOSITORY_URL'] ?: ''
def repoName = binding.variables['REPOSITORY_NAME'] ?: ''
def branch = binding.variables['BRANCH'] ?: 'main'
def credentialsId = binding.variables['CREDENTIALS_ID'] ?: ''

if (!repoUrl || !repoName) {
    throw new IllegalArgumentException('REPOSITORY_URL and REPOSITORY_NAME are required')
}

// Sanitize job name
def jobName = repoName.replaceAll(/[^A-Za-z0-9_-]/, '-')

folder('Projects') {
    description('Whanos project builds')
}

pipelineJob("Projects/${jobName}") {
    description("Whanos CI/CD for ${repoUrl}")
    
    parameters {
        stringParam('REGISTRY_HOST', '{{ registry_hostname | default("registry.whanos.example.com") }}', 'Docker registry host')
    }
    
    triggers {
        scm('* * * * *') // Poll SCM every minute
    }
    
    definition {
        cps {
            script("""
pipeline {
    agent any
    
    environment {
        REGISTRY_HOST = '{{ registry_hostname | default("registry.whanos.example.com") }}'
        REGISTRY_USER = '{{ registry_username | default("ci") }}'
        REGISTRY_PASS = '{{ registry_password | default("changeme") }}'
    }
    
    stages {
        stage('Checkout') {
            steps {
                checkout([
                    \$class: 'GitSCM',
                    branches: [[name: '${branch}']],
                    userRemoteConfigs: [[
                        url: '${repoUrl}'
                        ${credentialsId ? ", credentialsId: '${credentialsId}'" : ''}
                    ]]
                ])
            }
        }
        
        stage('Detect Language') {
            steps {
                script {
                    if (fileExists('Makefile')) {
                        env.LANGUAGE = 'c'
                    } else if (fileExists('app/pom.xml')) {
                        env.LANGUAGE = 'java'
                    } else if (fileExists('package.json')) {
                        env.LANGUAGE = 'javascript'
                    } else if (fileExists('requirements.txt')) {
                        env.LANGUAGE = 'python'
                    } else if (fileExists('app/main.bf')) {
                        env.LANGUAGE = 'befunge'
                    } else {
                        error('No supported language detected in repository')
                    }
                    echo "Detected language: \${env.LANGUAGE}"
                }
            }
        }
        
        stage('Build Image') {
            steps {
                script {
                    def imageName = "\${env.REGISTRY_HOST}/${jobName}:\${env.BUILD_NUMBER}"
                    
                    if (fileExists('Dockerfile')) {
                        // Custom Dockerfile exists - user wants to customize the base image
                        sh "docker build -t \${imageName} ."
                    } else {
                        // No custom Dockerfile - use standalone Whanos image
                        // Clone Whanos repo to get the standalone Dockerfile
                        sh \"\"\"
                            git clone --depth 1 --branch {{ whanos_git_branch | default('main') }} {{ whanos_git_repo | default('https://github.com/RaresFZ/whanos.git') }} /tmp/whanos-\${BUILD_NUMBER}
                            docker build -t \${imageName} -f /tmp/whanos-\${BUILD_NUMBER}/images/\${env.LANGUAGE}/Dockerfile.standalone .
                            rm -rf /tmp/whanos-\${BUILD_NUMBER}
                        \"\"\"
                    }
                    
                    env.IMAGE_NAME = imageName
                }
            }
        }
        
        stage('Push Image') {
            steps {
                script {
                    sh \"\"\"
                        echo "\${env.REGISTRY_PASS}" | docker login -u "\${env.REGISTRY_USER}" --password-stdin "\${env.REGISTRY_HOST}"
                        docker push "\${env.IMAGE_NAME}"
                        docker logout "\${env.REGISTRY_HOST}"
                    \"\"\"
                }
            }
        }
        
        stage('Deploy to Kubernetes') {
            when {
                expression { fileExists('whanos.yml') }
            }
            steps {
                script {
                    // Parse whanos.yml using shell commands
                    def replicas = sh(script: "grep -E '^  replicas:' whanos.yml | awk '{print \\\$2}' || echo '1'", returnStdout: true).trim()
                    def ports = sh(script: "grep -A 10 '^  ports:' whanos.yml | grep -E '^    - ' | sed 's/^    - //' | tr '\\n' ',' || echo ''", returnStdout: true).trim()
                    
                    // Generate basic deployment manifest
                    def manifest = \"\"\"
apiVersion: apps/v1
kind: Deployment
metadata:
  name: ${jobName}
  namespace: whanos-cicd
spec:
  replicas: \${replicas}
  selector:
    matchLabels:
      app: ${jobName}
  template:
    metadata:
      labels:
        app: ${jobName}
    spec:
      imagePullSecrets:
        - name: registry-credentials
      containers:
        - name: ${jobName}
          image: \${env.IMAGE_NAME}
          imagePullPolicy: Always
\"\"\"
                    
                    // Add ports if any
                    if (ports) {
                        manifest += "          ports:\\n"
                        ports.split(',').findAll { it }.each { port ->
                            manifest += "            - containerPort: \${port.trim()}\\n"
                        }
                    }
                    
                    // Check for resource requests/limits
                    def hasResources = sh(script: "grep -q '^  resources:' whanos.yml && echo 'true' || echo 'false'", returnStdout: true).trim()
                    if (hasResources == 'true') {
                        manifest += "          resources:\\n"
                        
                        def hasRequests = sh(script: "grep -q '^    requests:' whanos.yml && echo 'true' || echo 'false'", returnStdout: true).trim()
                        if (hasRequests == 'true') {
                            def memReq = sh(script: "grep -A 5 '^    requests:' whanos.yml | grep 'memory:' | head -1 | awk '{print \\\$2}' | tr -d '\"' || echo ''", returnStdout: true).trim()
                            def cpuReq = sh(script: "grep -A 5 '^    requests:' whanos.yml | grep 'cpu:' | head -1 | awk '{print \\\$2}' | tr -d '\"' || echo ''", returnStdout: true).trim()
                            
                            if (memReq || cpuReq) {
                                manifest += "            requests:\\n"
                                if (memReq) manifest += "              memory: \${memReq}\\n"
                                if (cpuReq) manifest += "              cpu: \${cpuReq}\\n"
                            }
                        }
                        
                        def hasLimits = sh(script: "grep -q '^    limits:' whanos.yml && echo 'true' || echo 'false'", returnStdout: true).trim()
                        if (hasLimits == 'true') {
                            def memLim = sh(script: "grep -A 5 '^    limits:' whanos.yml | grep 'memory:' | head -1 | awk '{print \\\$2}' | tr -d '\"' || echo ''", returnStdout: true).trim()
                            def cpuLim = sh(script: "grep -A 5 '^    limits:' whanos.yml | grep 'cpu:' | head -1 | awk '{print \\\$2}' | tr -d '\"' || echo ''", returnStdout: true).trim()
                            
                            if (memLim || cpuLim) {
                                manifest += "            limits:\\n"
                                if (memLim) manifest += "              memory: \${memLim}\\n"
                                if (cpuLim) manifest += "              cpu: \${cpuLim}\\n"
                            }
                        }
                    }
                    
                    // Apply deployment
                    writeFile file: 'deployment.yaml', text: manifest
                    sh 'kubectl apply -f deployment.yaml -n whanos-cicd'
                    
                    // Create service if ports exist
                    if (ports) {
                        def serviceManifest = \"\"\"
apiVersion: v1
kind: Service
metadata:
  name: ${jobName}
  namespace: whanos-cicd
spec:
  type: NodePort
  selector:
    app: ${jobName}
  ports:
\"\"\"
                        ports.split(',').findAll { it }.each { port ->
                            serviceManifest += \"\"\"
    - port: \${port.trim()}
      targetPort: \${port.trim()}
      protocol: TCP
\"\"\"
                        }
                        
                        writeFile file: 'service.yaml', text: serviceManifest
                        sh 'kubectl apply -f service.yaml -n whanos-cicd'
                    }
                }
            }
        }
    }
    
    post {
        always {
            deleteDir()
        }
    }
}
            """)
            sandbox(true)
        }
    }
}
      ]]></scriptText>
      <ignoreExisting>false</ignoreExisting>
      <ignoreMissingFiles>false</ignoreMissingFiles>
      <failOnMissingPlugin>false</failOnMissingPlugin>
      <failOnSeedCollision>false</failOnSeedCollision>
      <unstableOnDeprecation>false</unstableOnDeprecation>
      <removedJobAction>IGNORE</removedJobAction>
      <removedViewAction>IGNORE</removedViewAction>
      <removedConfigFilesAction>IGNORE</removedConfigFilesAction>
      <lookupStrategy>JENKINS_ROOT</lookupStrategy>
    </javaposse.jobdsl.plugin.ExecuteDslScripts>
  </builders>
  <publishers/>
  <buildWrappers/>
</project>
